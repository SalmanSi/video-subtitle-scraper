'use client';

import { useState } from 'react';
import axios from 'axios';

interface VideoInfo {
  video_id: string;
  title: string;
  duration: number;
  upload_date: string;
  uploader: string;
  view_count: number;
  like_count: number;
  tags: string[];
}

interface SubtitleAvailability {
  native_languages: string[];
  auto_generated_languages: string[];
}

interface VideoInfoResponse {
  success: boolean;
  video_info: VideoInfo;
  subtitle_availability: SubtitleAvailability;
}

interface SubtitleInfo {
  language: string;
  content: string;
  content_length: number;
  format: string;
  is_auto_generated: boolean;
}

interface ExtractionResponse {
  success: boolean;
  video_info: {
    title: string;
    video_id: string;
    duration: number;
  };
  subtitle_info: SubtitleInfo;
  available_languages: {
    native: string[];
    auto_generated: string[];
  };
}

const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

export default function SingleVideoIngestion() {
  const [videoUrl, setVideoUrl] = useState('');
  const [preferredLanguages, setPreferredLanguages] = useState(['en']);
  const [includeAutoGenerated, setIncludeAutoGenerated] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [videoInfo, setVideoInfo] = useState<VideoInfoResponse | null>(null);
  const [extractedSubtitles, setExtractedSubtitles] = useState<ExtractionResponse | null>(null);
  const [activeTab, setActiveTab] = useState<'info' | 'extract'>('info');

  const validateYouTubeUrl = (url: string): boolean => {
    const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/.+/;
    return youtubeRegex.test(url);
  };

  const getVideoInfo = async () => {
    if (!videoUrl.trim()) {
      setError('Please enter a video URL');
      return;
    }

    if (!validateYouTubeUrl(videoUrl)) {
      setError('Please enter a valid YouTube URL');
      return;
    }

    setLoading(true);
    setError(null);
    setVideoInfo(null);

    try {
      const response = await axios.post(`${API_BASE}/subtitles/info`, {
        video_url: videoUrl
      });

      setVideoInfo(response.data);
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Failed to get video information');
    } finally {
      setLoading(false);
    }
  };

  const extractSubtitles = async () => {
    if (!videoUrl.trim()) {
      setError('Please enter a video URL');
      return;
    }

    if (!validateYouTubeUrl(videoUrl)) {
      setError('Please enter a valid YouTube URL');
      return;
    }

    setLoading(true);
    setError(null);
    setExtractedSubtitles(null);

    try {
      const response = await axios.post(`${API_BASE}/subtitles/extract`, {
        video_url: videoUrl,
        preferred_languages: preferredLanguages,
        include_auto_generated: includeAutoGenerated
      });

      setExtractedSubtitles(response.data);
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Failed to extract subtitles');
    } finally {
      setLoading(false);
    }
  };

  const downloadSubtitles = async () => {
    if (!videoUrl.trim()) {
      setError('Please enter a video URL');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await axios.post(`${API_BASE}/subtitles/extract/download`, {
        video_url: videoUrl,
        preferred_languages: preferredLanguages,
        include_auto_generated: includeAutoGenerated
      }, {
        responseType: 'blob'
      });

      // Create download link
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      
      // Extract filename from response headers or create default
      const contentDisposition = response.headers['content-disposition'];
      let filename = 'subtitles.txt';
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename="(.+)"/);
        if (filenameMatch) {
          filename = filenameMatch[1];
        }
      }
      
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Failed to download subtitles');
    } finally {
      setLoading(false);
    }
  };

  const addLanguage = () => {
    const newLang = prompt('Enter language code (e.g., es, fr, de):');
    if (newLang && !preferredLanguages.includes(newLang)) {
      setPreferredLanguages([...preferredLanguages, newLang]);
    }
  };

  const removeLanguage = (lang: string) => {
    setPreferredLanguages(preferredLanguages.filter(l => l !== lang));
  };

  const formatDuration = (seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const formatNumber = (num: number): string => {
    if (num >= 1000000) {
      return `${(num / 1000000).toFixed(1)}M`;
    } else if (num >= 1000) {
      return `${(num / 1000).toFixed(1)}K`;
    }
    return num.toString();
  };

  return (
    <div className="single-video-container">
      {/* Header Section */}
      <div className="header-section">
        <h2>Single Video Processing</h2>
        <p>Extract subtitles from individual YouTube videos instantly</p>
      </div>

      <div className="content-section">
        {/* URL Input */}
        <div className="input-group">
          <label className="input-label">
            üé¨ YouTube Video URL
          </label>
          <div className="url-input-container">
            <div className="input-wrapper">
              <input
                type="url"
                value={videoUrl}
                onChange={(e) => setVideoUrl(e.target.value)}
                placeholder="https://www.youtube.com/watch?v=..."
                className="url-input"
              />
              {videoUrl && validateYouTubeUrl(videoUrl) && (
                <div className="validation-icon">
                  <span>‚úì</span>
                </div>
              )}
            </div>
            <button
              onClick={getVideoInfo}
              disabled={loading}
              className="get-info-btn"
            >
              {loading ? (
                <span className="loading-content">
                  <div className="spinner"></div>
                  Loading...
                </span>
              ) : (
                'üîç Get Info'
              )}
            </button>
          </div>
        </div>

        {/* Language Settings */}
        <div className="language-group">
          <label className="input-label">
            üåê Preferred Languages
          </label>
          <div className="language-container">
            <div className="language-tags">
              {preferredLanguages.map((lang) => (
                <span
                  key={lang}
                  className="language-tag"
                >
                  <span className="tag-text">{lang}</span>
                  <button
                    onClick={() => removeLanguage(lang)}
                    className="remove-btn"
                  >
                    √ó
                  </button>
                </span>
              ))}
              <button
                onClick={addLanguage}
                className="add-language-btn"
              >
                + Add Language
              </button>
            </div>
            
            <label className="checkbox-container">
              <input
                type="checkbox"
                checked={includeAutoGenerated}
                onChange={(e) => setIncludeAutoGenerated(e.target.checked)}
                className="checkbox-input"
              />
              <span className="checkbox-label">Include auto-generated subtitles</span>
            </label>
          </div>
        </div>

        {/* Tabs */}
        <div className="tabs-section">
          <div className="tabs-border">
            <nav className="tabs-nav">
              <button
                onClick={() => setActiveTab('info')}
                className={`tab-button ${activeTab === 'info' ? 'tab-active tab-info' : 'tab-inactive'}`}
              >
                üìä Video Information
              </button>
              <button
                onClick={() => setActiveTab('extract')}
                className={`tab-button ${activeTab === 'extract' ? 'tab-active tab-extract' : 'tab-inactive'}`}
              >
                üéØ Extract Subtitles
              </button>
            </nav>
          </div>
        </div>

        {/* Error Display */}
        {error && (
          <div className="error-display">
            <div className="error-content">
              <span className="error-icon">‚ö†Ô∏è</span>
              <div>
                <h3 className="error-title">Error</h3>
                <p className="error-message">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Loading Indicator */}
        {loading && (
          <div className="loading-display">
            <div className="loading-center">
              <div className="loading-spinner"></div>
              <span className="loading-title">Processing your request...</span>
              <p className="loading-subtitle">This may take a few moments</p>
            </div>
          </div>
        )}

        {/* Tab Content */}
        {activeTab === 'info' && (
          <div className="tab-content">
            {/* Video Info Display */}
            {videoInfo && (
              <div className="video-info-container">
                <div className="info-header">
                  <span className="info-icon">üé¨</span>
                  <h3 className="info-title">Video Information</h3>
                </div>
                
                <div className="info-grid">
                  <div className="info-card">
                    <p className="info-card-label">üìù Title</p>
                    <p className="info-card-value">{videoInfo.video_info.title}</p>
                  </div>
                  <div className="info-card">
                    <p className="info-card-label">‚è±Ô∏è Duration</p>
                    <p className="info-card-value">{formatDuration(videoInfo.video_info.duration)}</p>
                  </div>
                  <div className="info-card">
                    <p className="info-card-label">üë§ Uploader</p>
                    <p className="info-card-value">{videoInfo.video_info.uploader}</p>
                  </div>
                  <div className="info-card">
                    <p className="info-card-label">üìÖ Upload Date</p>
                    <p className="info-card-value">{videoInfo.video_info.upload_date}</p>
                  </div>
                  <div className="info-card">
                    <p className="info-card-label">üëÅÔ∏è Views</p>
                    <p className="info-card-value">{formatNumber(videoInfo.video_info.view_count)}</p>
                  </div>
                  <div className="info-card">
                    <p className="info-card-label">üëç Likes</p>
                    <p className="info-card-value">{formatNumber(videoInfo.video_info.like_count)}</p>
                  </div>
                </div>

                <div className="subtitle-languages-grid">
                  <div className="native-languages">
                    <div className="languages-header">
                      <span className="languages-icon">üî§</span>
                      <h4 className="languages-title">Native Subtitle Languages</h4>
                    </div>
                    <div className="languages-content">
                      {videoInfo.subtitle_availability.native_languages.length > 0 ? (
                        videoInfo.subtitle_availability.native_languages.map((lang) => (
                          <span
                            key={lang}
                            className="language-badge native"
                          >
                            {lang}
                          </span>
                        ))
                      ) : (
                        <div className="no-languages">
                          <span>üö´ No native subtitles available</span>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="auto-languages">
                    <div className="languages-header">
                      <span className="languages-icon">ü§ñ</span>
                      <h4 className="languages-title">Auto-Generated Languages</h4>
                    </div>
                    <div className="languages-content">
                      {videoInfo.subtitle_availability.auto_generated_languages.length > 0 ? (
                        videoInfo.subtitle_availability.auto_generated_languages.map((lang) => (
                          <span
                            key={lang}
                            className="language-badge auto"
                          >
                            {lang}
                          </span>
                        ))
                      ) : (
                        <div className="no-languages">
                          <span>üö´ No auto-generated subtitles available</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {videoInfo.video_info.tags && videoInfo.video_info.tags.length > 0 && (
                  <div className="tags-section">
                    <div className="tags-header">
                      <span className="tags-icon">üè∑Ô∏è</span>
                      <h4 className="tags-title">Tags</h4>
                    </div>
                    <div className="tags-content">
                      {videoInfo.video_info.tags.map((tag, index) => (
                        <span
                          key={index}
                          className="tag-badge"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {activeTab === 'extract' && (
          <div className="tab-content">
            {/* Action Buttons */}
            <div className="action-buttons">
              <button
                onClick={extractSubtitles}
                disabled={loading}
                className="action-btn extract-btn"
              >
                <span className="btn-icon">üéØ</span>
                Extract & Preview
              </button>
              <button
                onClick={downloadSubtitles}
                disabled={loading}
                className="action-btn download-btn"
              >
                <span className="btn-icon">üíæ</span>
                Download Directly
              </button>
            </div>

            {/* Extracted Subtitles Display */}
            {extractedSubtitles && (
              <div className="extracted-container">
                <div className="extracted-header">
                  <span className="extracted-icon">‚úÖ</span>
                  <h3 className="extracted-title">Subtitles Extracted Successfully!</h3>
                </div>
                
                <div className="extracted-info-grid">
                  <div className="extracted-info-card">
                    <p className="extracted-info-label">üé¨ Video Title</p>
                    <p className="extracted-info-value">{extractedSubtitles.video_info.title}</p>
                  </div>
                  <div className="extracted-info-card">
                    <p className="extracted-info-label">üåê Language</p>
                    <div className="language-info">
                      <span className="language-code">
                        {extractedSubtitles.subtitle_info.language}
                      </span>
                      {extractedSubtitles.subtitle_info.is_auto_generated && (
                        <span className="auto-tag">
                          ü§ñ Auto-generated
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="extracted-info-card">
                    <p className="extracted-info-label">üìä Content Length</p>
                    <p className="extracted-info-value">{extractedSubtitles.subtitle_info.content_length.toLocaleString()} characters</p>
                  </div>
                </div>

                <div className="subtitle-preview">
                  <div className="preview-header">
                    <h4 className="preview-title">
                      <span className="preview-icon">üìù</span>
                      Subtitle Content Preview
                    </h4>
                    <span className="format-badge">
                      Format: {extractedSubtitles.subtitle_info.format}
                    </span>
                  </div>
                  <div className="preview-content">
                    <pre className="subtitle-text">
                      {extractedSubtitles.subtitle_info.content.slice(0, 1000)}
                      {extractedSubtitles.subtitle_info.content.length > 1000 && (
                        <span className="more-text">
                          \n\n... ({(extractedSubtitles.subtitle_info.content.length - 1000).toLocaleString()} more characters)
                        </span>
                      )}
                    </pre>
                  </div>
                  
                  <div className="preview-footer">
                    <div>
                      <span className="footer-label">Full content:</span> {extractedSubtitles.subtitle_info.content_length.toLocaleString()} characters
                    </div>
                    <div>
                      <span className="footer-label">Format:</span> {extractedSubtitles.subtitle_info.format}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      <style jsx>{`
        .single-video-container {
          max-width: 1400px;
          margin: 0 auto;
          padding: 20px;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          background: white;
          border-radius: 12px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
          border: 1px solid #e5e7eb;
          overflow: hidden;
        }

        .header-section {
          background: linear-gradient(135deg, #2563eb 0%, #7c3aed 100%);
          padding: 32px 24px;
          margin: -20px -20px 32px -20px;
        }

        .header-section h2 {
          font-size: 2rem;
          font-weight: 700;
          color: white;
          margin: 0 0 8px 0;
        }

        .header-section p {
          color: #dbeafe;
          margin: 0;
          font-size: 1rem;
        }

        .content-section {
          padding: 0 4px;
        }

        .input-group {
          margin-bottom: 32px;
        }

        .language-group {
          margin-bottom: 32px;
        }

        .input-label {
          display: block;
          font-size: 14px;
          font-weight: 600;
          color: #374151;
          margin-bottom: 12px;
        }

        .url-input-container {
          display: flex;
          gap: 12px;
          align-items: stretch;
        }

        .input-wrapper {
          flex: 1;
          position: relative;
        }

        .url-input {
          width: 100%;
          padding: 12px 16px;
          border: 2px solid #e5e7eb;
          border-radius: 12px;
          font-size: 14px;
          transition: all 0.2s ease;
          color: #374151;
          background: white;
        }

        .url-input:focus {
          outline: none;
          border-color: #2563eb;
          box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .url-input::placeholder {
          color: #9ca3af;
        }

        .validation-icon {
          position: absolute;
          right: 12px;
          top: 50%;
          transform: translateY(-50%);
          color: #10b981;
          font-weight: 600;
        }

        .get-info-btn {
          padding: 12px 24px;
          background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
          color: white;
          border: none;
          border-radius: 12px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.2s ease;
          box-shadow: 0 2px 4px rgba(37, 99, 235, 0.2);
          white-space: nowrap;
        }

        .get-info-btn:hover:not(:disabled) {
          background: linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%);
          box-shadow: 0 4px 8px rgba(37, 99, 235, 0.3);
          transform: translateY(-1px);
        }

        .get-info-btn:disabled {
          opacity: 0.6;
          cursor: not-allowed;
          transform: none;
        }

        .loading-content {
          display: flex;
          align-items: center;
          gap: 8px;
        }

        .spinner {
          width: 16px;
          height: 16px;
          border: 2px solid transparent;
          border-top: 2px solid currentColor;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        .language-container {
          background: #f9fafb;
          border-radius: 12px;
          padding: 20px;
          border: 2px solid #e5e7eb;
        }

        .language-tags {
          display: flex;
          flex-wrap: wrap;
          gap: 8px;
          margin-bottom: 16px;
        }

        .language-tag {
          display: inline-flex;
          align-items: center;
          padding: 8px 16px;
          background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
          color: #1e40af;
          border-radius: 20px;
          border: 1px solid #93c5fd;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
          font-size: 14px;
        }

        .tag-text {
          font-weight: 600;
        }

        .remove-btn {
          margin-left: 8px;
          background: none;
          border: none;
          color: #2563eb;
          cursor: pointer;
          width: 20px;
          height: 20px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          transition: all 0.15s ease;
          font-size: 14px;
          font-weight: 600;
        }

        .remove-btn:hover {
          background: #3b82f6;
          color: white;
        }

        .add-language-btn {
          padding: 8px 16px;
          background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
          color: #374151;
          border: 1px solid #d1d5db;
          border-radius: 20px;
          cursor: pointer;
          transition: all 0.15s ease;
          font-size: 14px;
          font-weight: 500;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        .add-language-btn:hover {
          background: linear-gradient(135deg, #e5e7eb 0%, #d1d5db 100%);
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .checkbox-container {
          display: flex;
          align-items: center;
          background: white;
          border-radius: 8px;
          padding: 12px;
          border: 1px solid #d1d5db;
          cursor: pointer;
          transition: all 0.15s ease;
        }

        .checkbox-container:hover {
          background: #f9fafb;
        }

        .checkbox-input {
          width: 16px;
          height: 16px;
          margin-right: 12px;
          accent-color: #2563eb;
        }

        .checkbox-label {
          font-weight: 500;
          color: #374151;
          font-size: 14px;
        }

        .tabs-section {
          margin-bottom: 32px;
        }

        .tabs-border {
          border-bottom: 2px solid #e5e7eb;
        }

        .tabs-nav {
          display: flex;
          gap: 32px;
          margin-bottom: -2px;
        }

        .tab-button {
          padding: 12px 24px;
          border: none;
          background: none;
          cursor: pointer;
          font-weight: 600;
          font-size: 14px;
          transition: all 0.2s ease;
          border-bottom: 2px solid transparent;
          border-radius: 8px 8px 0 0;
        }

        .tab-inactive {
          color: #6b7280;
        }

        .tab-inactive:hover {
          color: #374151;
          background: #f9fafb;
          border-bottom-color: #d1d5db;
        }

        .tab-active {
          color: #1e40af;
          background: #f0f9ff;
          border-bottom-color: #2563eb;
        }

        .tab-active.tab-info {
          color: #1e40af;
          border-bottom-color: #2563eb;
        }

        .tab-active.tab-extract {
          color: #7c2d12;
          border-bottom-color: #7c3aed;
        }

        .error-display {
          margin-bottom: 32px;
          padding: 24px;
          background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
          border: 2px solid #fecaca;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .error-content {
          display: flex;
          align-items: flex-start;
        }

        .error-icon {
          font-size: 24px;
          margin-right: 12px;
          flex-shrink: 0;
        }

        .error-title {
          color: #991b1b;
          font-weight: 600;
          margin: 0 0 4px 0;
          font-size: 16px;
        }

        .error-message {
          color: #b91c1c;
          margin: 0;
          font-size: 14px;
        }

        .loading-display {
          margin-bottom: 32px;
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 48px 20px;
          background: linear-gradient(135deg, #f0f9ff 0%, #e0e7ff 100%);
          border-radius: 12px;
          border: 2px solid #bfdbfe;
        }

        .loading-center {
          text-align: center;
        }

        .loading-spinner {
          width: 48px;
          height: 48px;
          border: 4px solid #bfdbfe;
          border-top: 4px solid #2563eb;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin: 0 auto 16px auto;
        }

        .loading-title {
          font-size: 18px;
          font-weight: 600;
          color: #1e40af;
          display: block;
        }

        .loading-subtitle {
          color: #2563eb;
          margin: 8px 0 0 0;
          font-size: 14px;
        }

        .tab-content {
          min-height: 300px;
        }

        .video-info-container {
          background: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%);
          border-radius: 12px;
          padding: 32px;
          border: 2px solid #e5e7eb;
          box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.06);
        }

        .info-header {
          display: flex;
          align-items: center;
          margin-bottom: 24px;
        }

        .info-icon {
          font-size: 32px;
          margin-right: 12px;
        }

        .info-title {
          font-size: 24px;
          font-weight: 700;
          color: #111827;
          margin: 0;
        }

        .info-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
          gap: 20px;
          margin-bottom: 32px;
        }

        .info-card {
          background: white;
          border-radius: 8px;
          padding: 20px;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
          border: 1px solid #e5e7eb;
        }

        .info-card-label {
          font-size: 12px;
          color: #6b7280;
          font-weight: 600;
          margin: 0 0 4px 0;
        }

        .info-card-value {
          font-weight: 600;
          color: #111827;
          font-size: 14px;
          margin: 0;
          line-height: 1.4;
        }

        .subtitle-languages-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
          gap: 32px;
        }

        .native-languages, .auto-languages {
          background: white;
          border-radius: 12px;
          padding: 24px;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .native-languages {
          border: 2px solid #d1fae5;
        }

        .auto-languages {
          border: 2px solid #fef3c7;
        }

        .languages-header {
          display: flex;
          align-items: center;
          margin-bottom: 16px;
        }

        .languages-icon {
          font-size: 24px;
          margin-right: 8px;
        }

        .languages-title {
          font-weight: 700;
          color: #111827;
          font-size: 18px;
          margin: 0;
        }

        .languages-content {
          display: flex;
          flex-wrap: wrap;
          gap: 8px;
        }

        .language-badge {
          padding: 8px 16px;
          border-radius: 20px;
          font-size: 14px;
          font-weight: 600;
          border: 1px solid;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        .language-badge.native {
          background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
          color: #065f46;
          border-color: #6ee7b7;
        }

        .language-badge.auto {
          background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
          color: #92400e;
          border-color: #fbbf24;
        }

        .no-languages {
          text-align: center;
          padding: 16px;
          width: 100%;
        }

        .no-languages span {
          color: #9ca3af;
          font-size: 14px;
        }

        .tags-section {
          margin-top: 32px;
          background: white;
          border-radius: 12px;
          padding: 24px;
          border: 2px solid #e5e7eb;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .tags-header {
          display: flex;
          align-items: center;
          margin-bottom: 16px;
        }

        .tags-icon {
          font-size: 24px;
          margin-right: 8px;
        }

        .tags-title {
          font-weight: 700;
          color: #111827;
          font-size: 18px;
          margin: 0;
        }

        .tags-content {
          display: flex;
          flex-wrap: wrap;
          gap: 8px;
        }

        .tag-badge {
          padding: 6px 12px;
          background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
          color: #374151;
          border-radius: 6px;
          font-size: 12px;
          border: 1px solid #d1d5db;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        .action-buttons {
          display: flex;
          flex-wrap: wrap;
          gap: 16px;
          justify-content: center;
          margin-bottom: 32px;
        }

        .action-btn {
          padding: 16px 32px;
          border: none;
          border-radius: 12px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.2s ease;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
          display: flex;
          align-items: center;
          font-size: 16px;
        }

        .action-btn:hover:not(:disabled) {
          box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
          transform: translateY(-2px);
        }

        .action-btn:disabled {
          opacity: 0.6;
          cursor: not-allowed;
          transform: none;
        }

        .extract-btn {
          background: linear-gradient(135deg, #059669 0%, #047857 100%);
          color: white;
        }

        .extract-btn:hover:not(:disabled) {
          background: linear-gradient(135deg, #047857 0%, #065f46 100%);
        }

        .download-btn {
          background: linear-gradient(135deg, #7c3aed 0%, #6d28d9 100%);
          color: white;
        }

        .download-btn:hover:not(:disabled) {
          background: linear-gradient(135deg, #6d28d9 0%, #5b21b6 100%);
        }

        .btn-icon {
          margin-right: 8px;
          font-size: 18px;
        }

        .extracted-container {
          background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
          border-radius: 12px;
          padding: 32px;
          border: 2px solid #a7f3d0;
          box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.06);
        }

        .extracted-header {
          display: flex;
          align-items: center;
          margin-bottom: 24px;
        }

        .extracted-icon {
          font-size: 32px;
          margin-right: 12px;
        }

        .extracted-title {
          font-size: 24px;
          font-weight: 700;
          color: #065f46;
          margin: 0;
        }

        .extracted-info-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
          gap: 20px;
          margin-bottom: 32px;
        }

        .extracted-info-card {
          background: white;
          border-radius: 8px;
          padding: 20px;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
          border: 1px solid #a7f3d0;
        }

        .extracted-info-label {
          font-size: 12px;
          color: #059669;
          font-weight: 600;
          margin: 0 0 4px 0;
        }

        .extracted-info-value {
          font-weight: 600;
          color: #111827;
          font-size: 14px;
          margin: 0;
          line-height: 1.4;
        }

        .language-info {
          display: flex;
          align-items: center;
          gap: 8px;
        }

        .language-code {
          font-weight: 600;
          color: #111827;
          font-size: 14px;
        }

        .auto-tag {
          padding: 4px 8px;
          background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
          color: #92400e;
          border-radius: 12px;
          font-size: 10px;
          font-weight: 600;
          border: 1px solid #fbbf24;
        }

        .subtitle-preview {
          background: white;
          border-radius: 12px;
          padding: 24px;
          border: 2px solid #a7f3d0;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .preview-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 16px;
        }

        .preview-title {
          font-weight: 700;
          color: #111827;
          font-size: 18px;
          margin: 0;
          display: flex;
          align-items: center;
        }

        .preview-icon {
          margin-right: 8px;
          font-size: 20px;
        }

        .format-badge {
          font-size: 12px;
          color: #6b7280;
          background: #f3f4f6;
          padding: 6px 12px;
          border-radius: 20px;
        }

        .preview-content {
          background: #f9fafb;
          border: 2px solid #e5e7eb;
          border-radius: 8px;
          padding: 24px;
          max-height: 320px;
          overflow-y: auto;
        }

        .subtitle-text {
          font-size: 14px;
          color: #374151;
          white-space: pre-wrap;
          font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
          line-height: 1.6;
          margin: 0;
        }

        .more-text {
          color: #2563eb;
          font-weight: 600;
        }

        .preview-footer {
          margin-top: 16px;
          display: flex;
          justify-content: space-between;
          align-items: center;
          font-size: 12px;
          color: #6b7280;
          background: #f9fafb;
          border-radius: 8px;
          padding: 12px;
        }

        .footer-label {
          font-weight: 600;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
          .single-video-container {
            padding: 16px;
          }
          
          .header-section {
            padding: 24px 16px;
            margin: -16px -16px 24px -16px;
          }
          
          .url-input-container {
            flex-direction: column;
          }
          
          .info-grid {
            grid-template-columns: 1fr;
          }
          
          .subtitle-languages-grid {
            grid-template-columns: 1fr;
          }
          
          .action-buttons {
            flex-direction: column;
            align-items: stretch;
          }
          
          .tabs-nav {
            gap: 16px;
          }
          
          .preview-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 8px;
          }
          
          .preview-footer {
            flex-direction: column;
            align-items: flex-start;
            gap: 4px;
          }
        }
      `}</style>
    </div>
  );
}
